---
description: 
globs: 
alwaysApply: true
---
You are an expert in TypeScript, React Native, Expo, and Mobile UI development.

Project Structure
- This project uses a nested directory structure: personalcompass/ (workspace root) contains personalcompass-app/ (actual React Native app)
- ALL source code files must be created in personalcompass-app/src/ directory
- App-level files (App.tsx, package.json, etc.) belong in personalcompass-app/ directory
- NEVER create source files in the workspace root src/ directory
- Always verify the current working directory before creating files using pwd or list_dir tools
- The folder structure is: personalcompass-app/src/{components,screens,navigation,hooks,services,utils,types,context,styles}/

Code Style and Structure
- Write concise, technical TypeScript code with accurate examples.
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files: exported component, subcomponents, helpers, static content, types.
- Prefer React Native Reusables components (e.g., Button, Card, Separator) for consistent, minimal design.
- Follow React Native Reusables conventions for Tailwind class-based styling.
- Follow Expo's official documentation for setting up and configuring your projects: https://docs.expo.dev/

Naming Conventions
- Use lowercase with dashes for directories (e.g., components/compass-view).
- Favor named exports for components.

TypeScript Usage
- Use TypeScript for all code; prefer interfaces over types.
- Avoid enums; use maps instead.
- Use functional components with TypeScript interfaces.
- Use strict mode in TypeScript for better type safety.

Syntax and Formatting
- Use the "function" keyword for pure functions.
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
- Use declarative JSX.
- Use Prettier for consistent code formatting.

UI and Styling
- Use React Native Reusables' built-in components as the primary UI library.
- Apply styling using Tailwind CSS utility classes via the className prop on React Native Reusables components.
- Leverage React Native Reusables' native dark mode support and ensure all components adapt to dark themes by default.
- Prioritize minimal, clean, and spacious designs aligned with React Native Reusables' UI principles.
- Always use React Native Reusables components for buttons, headers, lists, cards, and common layouts.
- Avoid mixing React Native Reusables with other component libraries unless absolutely necessary.
- Implement responsive design with Flexbox and Expo's useWindowDimensions for screen size adjustments.
- Ensure high accessibility (a11y) standards using ARIA roles and native accessibility props.
- Leverage react-native-reanimated and react-native-gesture-handler for performant animations and gestures.

Safe Area Management
- Use SafeAreaProvider from react-native-safe-area-context to manage safe areas globally in your app.
- Wrap top-level components with SafeAreaView to handle notches, status bars, and other screen insets on both iOS and Android.
- Use SafeAreaScrollView for scrollable content to ensure it respects safe area boundaries.
- Avoid hardcoding padding or margins for safe areas; rely on SafeAreaView and context hooks.

Performance Optimization
- Minimize the use of useState and useEffect; prefer context and reducers for state management.
- Use Expo's AppLoading and SplashScreen for optimized app startup experience.
- Optimize images: use WebP format where supported, include size data, implement lazy loading with expo-image.
- Implement code splitting and lazy loading for non-critical components with React's Suspense and dynamic imports.
- Profile and monitor performance using React Native's built-in tools and Expo's debugging features.
- Avoid unnecessary re-renders by memoizing components and using useMemo and useCallback hooks appropriately.

Navigation
- Use react-navigation for routing and navigation; follow its best practices for stack, tab, and drawer navigators.
- Use stack navigation for transitioning between the map screen and compass screen.
- Leverage deep linking and universal links for better user engagement and navigation flow.
- Use dynamic routes with expo-router for better navigation handling if scaling the app later.

State Management
- Use React Context and useReducer for managing global state.
- Prefer React Context for managing selected locations and heading state.
- Leverage react-query for data fetching and caching if backend is added later.
- For complex state management, consider using Zustand or Redux Toolkit.
- Handle URL search parameters using libraries like expo-linking if deep linking is used later.

Storage
- Use @react-native-async-storage/async-storage for storing user-selected locations and compass preferences.
- Store locations as JSON arrays.
- Always check for null values and default to an empty array if storage is empty.

Device Sensors
- Use expo-sensors Magnetometer for accessing the device compass heading.
- Smooth compass heading updates using subscriptions.
- Normalize all angles to between 0 and 360 degrees.
- Use expo-location to retrieve user’s current latitude and longitude.
- Always request permissions for location and compass on component mount using Expo’s recommended practices.

Maps
- Use react-native-maps to display interactive maps and allow users to drop pins.
- Support tap-to-drop-pin functionality.
- Persist pin locations using AsyncStorage.

Compass UI
- Use react-native-svg to render the compass ring and multiple location indicators.
- Each indicator should be color-coded or iconified for clarity.
- Indicators must be dynamically positioned based on the difference between the user's heading and the bearing to the location.

Error Handling and Validation
- Use Zod for runtime validation and error handling.
- Implement proper error logging using Sentry or a similar service.
- Prioritize error handling and edge cases:
  - Handle permission denial and sensor unavailability gracefully.
  - Use early returns for error conditions to avoid deeply nested if statements.
  - Avoid unnecessary else statements; use if-return pattern instead.
  - Implement global error boundaries to catch and handle unexpected errors.
- Use expo-error-reporter for logging and reporting errors in production.

Testing
- Write unit tests using Jest and React Native Testing Library.
- Implement integration tests for critical user flows using Detox.
- Use Expo's testing tools for running tests in different environments.
- Consider snapshot testing for components to ensure UI consistency.

Security
- Sanitize user inputs to prevent XSS attacks (if web version added later).
- Use react-native-encrypted-storage for secure storage of sensitive data if auth is added later.
- Ensure secure communication with APIs using HTTPS and proper authentication (if backend is added).
- Use Expo's Security guidelines to protect your app: https://docs.expo.dev/guides/security/

Key Conventions
1. Rely on Expo's managed workflow for streamlined development and deployment.
2. Prioritize Mobile Web Vitals (Load Time, Jank, and Responsiveness).
3. Use expo-constants for managing environment variables and configuration.
4. Use expo-permissions to handle device permissions gracefully.
5. Implement expo-updates for over-the-air (OTA) updates.
6. Follow Expo's best practices for app deployment and publishing: https://docs.expo.dev/distribution/introduction/
7. Ensure compatibility with iOS and Android by testing extensively on both platforms.

API Documentation
- Use React Native Reusables documentation as the primary reference for component usage: https://www.reactnativereusables.com/getting-started/introduction/
- Use Expo's official documentation for setting up and configuring your projects: https://docs.expo.dev/
- Use react-native-maps documentation for map configuration: https://github.com/react-native-maps/react-native-maps
- Use expo-sensors documentation for compass integration: https://docs.expo.dev/versions/latest/sdk/sensors/

React Native Reusables Conventions
- Always use React Native Reusables components for buttons, headers, lists, cards, and common layouts.
- Avoid mixing React Native Reusables with other component libraries unless absolutely necessary.
- Apply all styling using Tailwind CSS utility classes through React Native Reusables' className prop.
- Use React Native Reusables' default theming system with dark mode support enabled.
- Reference the official documentation for all React Native Reusables component configurations: https://www.reactnativereusables.com/getting-started/introduction/

Refer to Expo's documentation for detailed information on Views, Blueprints, and Extensions for best practices.
